services:
  server:
    build:
      context: src/
      dockerfile: backend/Dockerfile
    restart: always
    ports:
      - "5000:5000"
    networks:
      - network
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy

  zookeeper:
    image: bitnami/zookeeper:3.6.3
    restart: always
    environment:
      ALLOW_ANONYMOUS_LOGIN: "yes"
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_4LW_COMMANDS_WHITELIST: "*" # Разрешить все команды для healthcheck
      ZOOKEEPER_CLIENT_ADDRESS: "0.0.0.0"    # Явно указываем IPv4
      ZOOKEEPER_TICK_TIME: "2000"
    networks:
      - network
    healthcheck:
      test: ["CMD", "zkServer.sh", "status"]
      interval: 15s
      retries: 3
      timeout: 10s
    depends_on:
      db:
        condition: service_healthy

  kafka:
    image: bitnami/kafka:3.7.0
    restart: always
    environment:
#      KAFKA_CLIENT_USER: ${KAFKA_USERNAME}
#      KAFKA_CLIENT_PASSWORD: ${KAFKA_PASSWORD}
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CFG_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: PLAINTEXT
    depends_on:
      zookeeper:
        condition: service_healthy
      db:
        condition: service_healthy
    networks:
      - network
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      retries: 3
      start_period: 15s
      timeout: 5s

  telegram:
    build:
      context: src/
      dockerfile: frontend/telegram/Dockerfile
    restart: always
    env_file:
      - .env
    depends_on:
      kafka:
        condition: service_healthy
      db:
        condition: service_healthy
    networks:
      - network

  notification-service:
    build:
      context: src/
      dockerfile: notification_service/Dockerfile
    restart: always
    env_file:
      - .env
    depends_on:
      kafka:
        condition: service_healthy
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - network

  redis:
    image: redis:7.4.2
    restart: always
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"]
    networks:
      - network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      retries: 3
      start_period: 15s
      timeout: 5s

  db:
    build:
      context: src/
      dockerfile: Dockerfile-DB
    restart: always
    env_file:
      - .env
    volumes:
      - db:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 3

networks:
  network:
    driver: bridge

volumes:
  db: